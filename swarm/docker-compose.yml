version: '3.7'

services:
  # MySQL NDB Manager
  management:
    image: oscarcosta/boat-mysql-cluster
    hostname: management
    networks: 
      - cluster_net
    entrypoint: /my_entrypoint.sh
    command: ndb_mgmd --ndb-nodeid=1
    deploy:
      #replicas: 3
      placement:
        constraints: [node.labels.type == services]
        #constraints: [node.role == manager]

  # MySQL NDB Data Nodes
  ndb1:
    image: oscarcosta/boat-mysql-cluster
    hostname: ndb1
    networks: 
      - cluster_net
    entrypoint: /my_entrypoint.sh
    command: ndbd
    depends_on:
      - management
    deploy:
      placement:
        constraints: [node.labels.type == data]

  ndb2:
    image: oscarcosta/boat-mysql-cluster
    hostname: ndb2
    networks: 
      - cluster_net
    entrypoint: /my_entrypoint.sh
    command: ndbd
    depends_on:
      - management
    deploy:
      placement:
        constraints: [node.labels.type == data]

  # MySQL API Nodes
  mysql:
    image: oscarcosta/boat-mysql-cluster
    hostname: mysql
    networks: 
      - cluster_net
    environment:
      - MYSQL_ROOT_PASSWORD=Password
      - MYSQL_DATABASE=boatdb
      - MYSQL_USER=boat
      - MYSQL_PASSWORD=boat
    entrypoint: /my_entrypoint.sh
    command: mysqld
    depends_on:
      - management
    deploy:
      #replicas: 3
      placement:
        constraints: [node.labels.type == services]

  # Web App
  web:
    image: oscarcosta/boat-web-app
    hostname: web
    networks: 
      - cluster_net
    ports:
      - "80:80"
    environment:
      - MYSQL_host=mysql1
      - MYSQL_database=boatdb
      - MYSQL_user=boat
      - MYSQL_password=boat
      - CSV_filename=data.csv
    command: /bin/bash -c "cd /usr/src/web_app && npm install -y && npm start"
    depends_on:
      - mysql
    deploy:
      #replicas: 3
      placement:
        constraints: [node.labels.type == services]

  # Docker Visualizer
  visualizer:
    image: dockersamples/visualizer:stable
    networks: 
      - cluster_net
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  cluster_net:
    external: true # Use a pre-existing network
